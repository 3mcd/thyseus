// Generated by dts-bundle-generator v7.0.0

declare const Send: unique symbol;
declare const Receive: unique symbol;
export declare const ThreadProtocol: {
	readonly Send: typeof Send;
	readonly Receive: typeof Receive;
};
declare type Primitive = void | null | undefined | boolean | number | string | bigint;
declare type BinaryView = ArrayBuffer | SharedArrayBuffer | Uint8Array | Uint16Array | Uint32Array | BigUint64Array | Int8Array | Int16Array | Int32Array | BigInt64Array | Float32Array | Float64Array | Uint8ClampedArray | DataView;
declare type StructuredCloneable = Primitive | BinaryView | Date | RegExp | Blob | File | FileList | ImageBitmap | ImageData;
declare type SendableType = StructuredCloneable | Map<StructuredCloneable, StructuredCloneable> | Set<StructuredCloneable> | SendableType[] | {
	[key: string]: SendableType;
} | SendableInstance;
interface SendableInstance<T extends SendableType = SendableType> {
	[ThreadProtocol.Send](): T;
}
interface SendableClass<T extends SendableType = void> {
	new (...args: any[]): SendableInstance<T>;
	[ThreadProtocol.Receive](data: T): SendableInstance<T>;
}
declare type Listener<I extends SendableType = void, O extends SendableType = void> = (data: I) => O;
declare type ThreadMessage = [
	id: number,
	channel: string,
	data: SendableType
];
interface WorkerOrGlobal {
	postMessage(content: any): void;
	addEventListener(type: "message", fn: (event: MessageEvent<ThreadMessage>) => void): void;
	removeEventListener(type: "message", fn: (event: MessageEvent<ThreadMessage>) => void): void;
}
declare class ThreadGroup {
	#private;
	static isMainThread: boolean;
	static spawn(count: number, url: string | URL | undefined, sendableTypes: SendableClass<any>[]): ThreadGroup;
	constructor(threads: WorkerOrGlobal[], sendableTypes: SendableClass<any>[]);
	/**
	 * Sets a callback to be called when a message is received on a particular channel.
	 * **NOTE**: Only **one** listener can be set per channel.
	 * @param channel The channel to listen to.
	 * @param listener A callback that is called when a message is received on this channel. The callback receives the content of the message, and its return will be sent in response.
	 */
	setListener<I extends SendableType = void, O extends SendableType = void>(channel: string, listener: Listener<I, O>): void;
	/**
	 * Deletes the listener for a message channel.
	 * @param channel The channel to unsubscribe from.
	 */
	deleteListener(channel: string): void;
	/**
	 * Sends a value to a channel.
	 * @param channel The channel to send the value to.
	 * @param message The value to send.
	 * @returns A promise, resolves to an array of results from all threads.
	 */
	send<T extends SendableType = void>(channel: string, message: SendableType): Promise<T[]>;
	/**
	 * **WARNING: This method is order-sensitive and should only be called while the main thread and worker threads are executing the same code (i.e., while a world is being built).**
	 * **Use `send` and `setListener` for more flexible usage.**
	 *
	 * On the main thread, creates a value, sends it to all threads, and waits for them to receive it.
	 *
	 * On worker threads, waits to receive the value sent by the main thread.
	 *
	 * @param create A callback to create the value you wish to send - only invoked on the main thread.
	 * @returns A promise resolving to the return of the `create` callback.
	 */
	sendOrReceive<T extends SendableType>(create: () => T): Promise<T>;
}
export function Component(schema?: null | undefined): ComponentType<{}>;
export function Component<T extends Schema>(schema: T): ComponentType<T> & {
	new (...args: any[]): SchemaInstance<T>;
};
export declare enum Type {
	u8 = 0,
	u16 = 1,
	u32 = 2,
	u64 = 3,
	i8 = 4,
	i16 = 5,
	i32 = 6,
	i64 = 7,
	f32 = 8,
	f64 = 9
}
interface TypeToTypedArray {
	[Type.u8]: Uint8Array;
	[Type.u16]: Uint16Array;
	[Type.u32]: Uint32Array;
	[Type.u64]: BigUint64Array;
	[Type.i8]: Int8Array;
	[Type.i16]: Int16Array;
	[Type.i32]: Int32Array;
	[Type.i64]: BigInt64Array;
	[Type.f32]: Float32Array;
	[Type.f64]: Float64Array;
}
interface WorldConfig {
	threads: number;
	maxEntities: number;
	getNewTableSize(prev: number): number;
}
interface SingleThreadedWorldConfig extends WorldConfig {
	threads: 1;
}
declare class Table {
	columns: Map<ComponentType<any>, ComponentStore<any>>;
	meta: Uint32Array;
	static create(components: ComponentType[], capacity: number): Table;
	constructor(columns: Map<ComponentType, ComponentStore>, meta: Uint32Array);
	get size(): number;
	set size(value: number);
	get capacity(): number;
	get isFull(): boolean;
	add(entityId: bigint): void;
	delete(index: number): void;
	move(index: number, targetTable: Table): void;
	grow(config: WorldConfig): void;
}
export declare class Entity {
	static schema: {
		val: Type.u64;
	};
	static size: number;
	store: {
		val: BigUint64Array;
	};
	index: number;
	commands: WorldCommands;
	constructor(store: {
		val: BigUint64Array;
	}, index: number, commands: WorldCommands);
	/**
	 * The entity's world-unique integer id (uint64).
	 * Composed of an entity's generation & index.
	 */
	get id(): bigint;
	/**
	 * The index of this entity (uint32).
	 */
	get entityIndex(): number;
	/**
	 * The generation of this entity (uint32).
	 */
	get generation(): number;
	/**
	 * Queues a component to be inserted into this entity.
	 * @param Component The Component **class** to insert into the entity.
	 * @returns `this`, for chaining.
	 */
	insert(Component: ComponentType<any>): this;
	/**
	 * Queues a component to be removed from this entity.
	 * @param Component The Component **class** to remove from the entity.
	 * @returns `this`, for chaining.
	 */
	remove(Component: ComponentType): this;
	/**
	 * Queues this entity to be despawned.
	 * @returns `void`
	 */
	despawn(): void;
}
declare class BigUintArray {
	#private;
	static with(width: number, length: number, isShared?: boolean): BigUintArray;
	width: number;
	length: number;
	constructor(width: number, length: number, data: Uint8Array);
	get bytesPerElement(): number;
	get byteLength(): number;
	get(element: number): bigint;
	set(element: number, value: bigint): void;
	OR(element: number, value: bigint): void;
	AND(element: number, value: bigint): void;
	XOR(element: number, value: bigint): void;
	[ThreadProtocol.Send](): SerializedBigUintNArray;
	static [ThreadProtocol.Receive]([width, length, data,]: SerializedBigUintNArray): BigUintArray;
}
declare type SerializedBigUintNArray = [
	width: number,
	length: number,
	data: Uint8Array
];
declare class Mutex<T extends any> {
	#private;
	constructor(data: T, state?: Int32Array);
	get isLocked(): boolean;
	UNSAFE_getData(): T;
	request<R extends (data: T) => any>(fn: R): Promise<ReturnType<R>>;
	[ThreadProtocol.Send](): [
		T,
		Int32Array
	];
	static [ThreadProtocol.Receive]<T>([data, state]: [
		T,
		Int32Array
	]): Mutex<T>;
}
declare class SparseSet {
	#private;
	static with(length: number, isShared?: boolean): SparseSet;
	sparse: Uint32Array;
	dense: Uint32Array;
	constructor(sparse: Uint32Array, dense: Uint32Array, metadata: Uint32Array);
	get size(): number;
	set size(value: number);
	has(value: number): boolean;
	add(value: number): this;
	delete(value: number): boolean;
	clear(): void;
	[Symbol.iterator](): Generator<number, void, unknown>;
	[ThreadProtocol.Send](): SerializedSparseSet;
	static [ThreadProtocol.Receive]([sparse, dense, meta,]: SerializedSparseSet): SparseSet;
}
declare type SerializedSparseSet = [
	sparse: Uint32Array,
	dense: Uint32Array,
	meta: Uint32Array
];
declare class Entities {
	#private;
	static fromWorld(config: WorldConfig): Promise<Entities>;
	generations: Uint32Array;
	tableIds: BigUintArray;
	row: Uint32Array;
	constructor(generations: Uint32Array, tableIds: BigUintArray, row: Uint32Array, data: Uint32Array, free: Uint32Array);
	spawn(): bigint;
	despawn(id: bigint): void;
	getTableId(id: bigint): bigint;
	getRow(id: bigint): number;
	setLocation(entityId: bigint, tableId: bigint, row: number): void;
}
declare class WorldCommands {
	#private;
	queue: Map<bigint, bigint>;
	constructor(entities: Entities, components: Set<ComponentType>);
	/**
	 * Queues an entity to be spawned.
	 * @returns `EntityCommands` to add/remove components from an entity.
	 */
	spawn(): Entity;
	/**
	 * Queues an entity to be despawned.
	 * @param id The id of the entity to despawn.
	 * @returns `this`, for chaining.
	 */
	despawn(id: bigint): this;
	/**
	 * Gets an entity to modify.
	 * @param id The id of the entity to get.
	 * @returns `EntityCommands` to add/remove components from an entity.
	 */
	get(id: bigint): Entity;
	insertInto(id: bigint, Component: ComponentType): void;
	removeFrom(id: bigint, Component: ComponentType): void;
}
declare type SchemaField = Type;
declare type Schema = SchemaField[] | {
	[key: string]: SchemaField;
};
declare type ComponentStore<T extends Schema = any> = {
	[Key in keyof T]: TypeToTypedArray[T[Key] extends Type ? T[Key] : never];
};
declare type SchemaInstance<T extends Schema> = {
	[Key in keyof T]: T[Key] extends Type.u64 | Type.i64 ? bigint : number;
};
interface ComponentType<T extends Schema = any> {
	schema: T;
	size: number;
	new (store: any, index: number, commands: WorldCommands): object;
}
interface Class {
	new (...args: any[]): object;
}
declare type ResourceType = SendableClass<SendableType> | Class;
export function Resource<T extends Schema>(schema: T): SendableClass<DataView> & {
	new (dataView: DataView): SchemaInstance<T>;
};
declare type DescriptorToArgument<T extends Descriptor> = ReturnType<T["intoArgument"]>;
interface Descriptor {
	isLocalToThread(): boolean;
	intersectsWith(other: unknown): boolean;
	onAddSystem(worldBuilder: WorldBuilder): void;
	intoArgument(world: World): any;
}
declare class CommandsDescriptor implements Descriptor {
	isLocalToThread(): boolean;
	intersectsWith(other: unknown): boolean;
	intoArgument(world: World): WorldCommands;
	onAddSystem(builder: WorldBuilder): void;
}
declare enum AccessType {
	Read = 0,
	Write = 1
}
interface Mutable<T extends Class> {
	0: T;
	1: 1;
}
export declare function Mut<T extends Class>(x: T): Mutable<T>;
export declare namespace Mut {
	var isMut: <T extends Class = Class>(x: unknown) => x is Mutable<T>;
}
interface Query<C extends object> {
	[Symbol.iterator](): Iterator<C>;
}
declare type QueryMember = ComponentType<any> | Mutable<ComponentType<any>>;
declare class QueryDescriptor<C extends QueryMember[]> implements Descriptor {
	components: ComponentType<any>[];
	accessType: AccessType[];
	constructor(components: [
		...C
	]);
	isLocalToThread(): boolean;
	intersectsWith(other: unknown): boolean;
	onAddSystem(builder: WorldBuilder): void;
	intoArgument(world: World): Query<{
		[Index in keyof C]: C[Index] extends Mutable<infer X> ? InstanceType<X> : Readonly<InstanceType<C[Index] extends ComponentType<any> ? C[Index] : never>>;
	}>;
}
declare class ResourceDescriptor<T extends ResourceType | Mutable<ResourceType>> implements Descriptor {
	resource: ResourceType;
	accessType: AccessType;
	constructor(resource: T);
	isLocalToThread(): boolean;
	intersectsWith(other: unknown): boolean;
	onAddSystem(builder: WorldBuilder): void;
	intoArgument(world: World): T extends Mutable<infer X> ? InstanceType<X> : Readonly<InstanceType<T extends Class ? T : never>>;
}
declare class WorldDescriptor implements Descriptor {
	isLocalToThread(): boolean;
	intersectsWith(other: unknown): boolean;
	intoArgument(world: World): World;
	onAddSystem(builder: WorldBuilder): void;
}
export declare const P: {
	Commands: () => CommandsDescriptor;
	Query: <C extends (ComponentType<any> | Mutable<ComponentType<any>>)[]>(components: [
		...C
	]) => QueryDescriptor<C>;
	Res: <T extends ResourceType | Mutable<ResourceType>>(resource: T) => ResourceDescriptor<T>;
	World: () => WorldDescriptor;
};
declare type Parameters<T extends Descriptor[]> = {
	[Index in keyof T]: DescriptorToArgument<T[Index]>;
};
interface SystemDefinition<T extends Descriptor[] = Descriptor[]> {
	fn(...args: Parameters<T>): void;
	parameters: T;
}
export function defineSystem<T extends Descriptor[]>(parameters: [
	...T
], fn: (...args: Parameters<T>) => void): SystemDefinition<T>;
interface Dependencies {
	before?: SystemDefinition[];
	after?: SystemDefinition[];
	beforeAll?: boolean;
	afterAll?: boolean;
}
declare const _default: SystemDefinition<[
]>;
 > ;
interface System {
	args: any[];
	execute(...args: any[]): void;
}
declare type Plugin = (worldBuilder: WorldBuilder) => void;
export function definePlugin<T extends Plugin>(plugin: T): T;
declare class WorldBuilder {
	#private;
	constructor(config: WorldConfig, url: string | URL | undefined);
	get resources(): Set<ResourceType>;
	get components(): Set<ComponentType<any>>;
	get config(): WorldConfig;
	get url(): string | URL | undefined;
	/**
	 * Adds a system to the world and processes its parameter descriptors.
	 * @param system The system to add.
	 * @param dependencies The dependencies of this system.
	 * @returns `this`, for chaining.
	 */
	addSystem(system: SystemDefinition, dependencies?: Dependencies): this;
	/**
	 * Adds a system to the world _**that will only be run once when built**_.
	 * @param system The system to add.
	 * @returns `this`, for chaining.
	 */
	addStartupSystem(system: SystemDefinition): this;
	/**
	 * Passes this WorldBuilder to the provided plugin function.
	 * @param plugin The plugin to pass this WorldBuilder to.
	 * @returns `this`, for chaining.
	 */
	addPlugin(plugin: Plugin): this;
	/**
	 * Registers a Component in the world. Called automatically for all queried components when a system is added.
	 * @param ComponentType The ComponentType to register.
	 * @returns `this`, for chaining.
	 */
	registerComponent(ComponentType: ComponentType<any>): this;
	/**
	 * Registers a Resource in the world. Called automatically for all accessed resources when a system is added.
	 * @param ResourceType The ResourceType to register.
	 * @returns `this`, for chaining.
	 */
	registerResource(ResourceType: ResourceType): this;
	/**
	 * Registers a Resource in the world. Called automatically for all used sendable classes when a system is added.
	 * @param SendableClass The SendableClass to register.
	 * @returns `this`, for chaining.
	 */
	registerSendableClass(SendableClass: SendableClass<any>): this;
	/**
	 * Builds the world.
	 * `World` instances cannot add new systems or register new types.
	 * This method returns a promise for both single- _and_ multi-threaded worlds.
	 * @returns `Promise<World>`
	 */
	build(): Promise<World>;
}
declare class Executor {
	#private;
	static from(intersections: bigint[], dependencies: bigint[], local: Set<number>): Executor;
	constructor(intersections: bigint[], dependencies: bigint[], systemsToExecute: SparseSet, lock: Mutex<BigUintArray>, local: Set<number>);
	add(system: number): void;
	start(): void;
	reset(): void;
	onReady(fn: () => void): Promise<void>;
	[Symbol.asyncIterator](): AsyncGenerator<number, void, unknown>;
	[ThreadProtocol.Send](): SerializedExecutor;
	static [ThreadProtocol.Receive](data: SerializedExecutor): Executor;
}
declare type SerializedExecutor = [
	intersections: bigint[],
	dependencies: bigint[],
	systemsToExecute: SparseSet,
	lock: Mutex<BigUintArray>
];
declare class World {
	#private;
	static new(config?: Partial<SingleThreadedWorldConfig>): WorldBuilder;
	static new(config: Partial<WorldConfig>, url: string | URL): WorldBuilder;
	archetypes: Map<bigint, Table>;
	queries: Query<any>[];
	config: WorldConfig;
	resources: Map<ResourceType, object>;
	threads: ThreadGroup;
	commands: WorldCommands;
	entities: Entities;
	components: ComponentType[];
	constructor(config: WorldConfig, resources: Map<ResourceType, object>, threads: ThreadGroup, systems: System[], executor: Executor, commands: WorldCommands, entities: Entities, components: ComponentType[]);
	moveEntity(entityId: bigint, targetTableId: bigint): void;
	update(): Promise<void>;
}

export {
	World as default,
	_default as applyCommands,
};

export {};
